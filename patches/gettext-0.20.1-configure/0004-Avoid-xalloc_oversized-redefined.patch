From: Michele Locati <michele@locati.it>
Date: Fri, 10 May 2019 10:45:12 +0200
Subject: [PATCH] Avoid "xalloc_oversized" redefined

--- a/gettext-runtime/gnulib-lib/xalloc-oversized.h
+++ b/gettext-runtime/gnulib-lib/xalloc-oversized.h
@@ -41,6 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
+#undef xalloc_oversized
 #if 7 <= __GNUC__
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)

--- a/gettext-runtime/gnulib-lib/xalloc.h
+++ b/gettext-runtime/gnulib-lib/xalloc.h
@@ -146,6 +146,7 @@ extern char *xstrdup (const char *string);
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+#undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 

--- a/gettext-tools/gnulib-lib/xalloc-oversized.h
+++ b/gettext-tools/gnulib-lib/xalloc-oversized.h
@@ -41,6 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
+#undef xalloc_oversized
 #if 7 <= __GNUC__
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)

--- a/gettext-tools/gnulib-lib/xalloc.h
+++ b/gettext-tools/gnulib-lib/xalloc.h
@@ -146,6 +146,7 @@ extern char *xstrdup (const char *string);
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+#undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 

--- a/gettext-tools/libgettextpo/xalloc-oversized.h
+++ b/gettext-tools/libgettextpo/xalloc-oversized.h
@@ -41,6 +41,7 @@ typedef size_t __xalloc_count_type;
    positive and N must be nonnegative.  This is a macro, not a
    function, so that it works correctly even when SIZE_MAX < N.  */
 
+#undef xalloc_oversized
 #if 7 <= __GNUC__
 # define xalloc_oversized(n, s) \
    __builtin_mul_overflow_p (n, s, (__xalloc_count_type) 1)

--- a/gettext-tools/libgettextpo/xalloc.h
+++ b/gettext-tools/libgettextpo/xalloc.h
@@ -146,6 +146,7 @@ extern char *xstrdup (const char *string);
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+#undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 

--- a/gnulib-local/lib/xalloc.h
+++ b/gnulib-local/lib/xalloc.h
@@ -146,6 +146,7 @@ extern char *xstrdup (const char *string);
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+#undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
 

--- a/libtextstyle/lib/xalloc.h
+++ b/libtextstyle/lib/xalloc.h
@@ -146,6 +146,7 @@ extern char *xstrdup (const char *string);
    sizeof (ptrdiff_t) <= sizeof (size_t), so do not bother to test for
    exactly-SIZE_MAX allocations on such hosts; this avoids a test and
    branch when S is known to be 1.  */
+#undef xalloc_oversized
 # define xalloc_oversized(n, s) \
     ((size_t) (sizeof (ptrdiff_t) <= sizeof (size_t) ? -1 : -2) / (s) < (n))
